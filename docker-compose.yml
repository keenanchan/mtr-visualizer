services:
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - mtrnet
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_NAME: "Main Org."
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./assets/geojson:/usr/share/grafana/public/custom
      - ./assets/img/icons:/usr/share/grafana/public/img/icons/custom
    depends_on:
      - timescaledb

  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: timescaledb
    restart: always
    ports:
      - "5432:5432"
    networks:
      - mtrnet
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mtr
      TIMESCALEDB_TELEMETRY: "off"
    volumes:
      - tsdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d

  data-service:
    build: ./data-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_started
    networks:
      - mtrnet
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: mtr
      DB_USER: postgres
      DB_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
    volumes:
      - ./data-service/scripts:/scripts
      - ./assets/geojson:/geojson

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbit
    user: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mtrnet
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 20s
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_NODENAME: rabbit@rabbit
  
  producer:
    build: ./producer
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    networks:
      - mtrnet
    environment:
      RABBITMQ_HOST: rabbitmq
    volumes:
      - ./line_station.py:/app/line_station.py:ro
  
  consumer:
    build: ./consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_started
    restart: on-failure
    networks:
      - mtrnet
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: mtr
      DB_USER: postgres
      DB_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
    volumes:
      - ./line_station.py:/app/line_station.py:ro
  
networks:
  mtrnet:
    driver: bridge

volumes:
  tsdata:
    name: timescaledb_data
  grafana_data:
    name: grafana_data